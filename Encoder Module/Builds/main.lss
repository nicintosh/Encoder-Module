
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000026e  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7f  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a8 30       	cpi	r26, 0x08	; 8
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  90:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <initIO>:
    /*
     * Port A Setup
     * 
     * Encoder input port
     */
    DDRA = 0b00000000;
  98:	11 b8       	out	0x01, r1	; 1
     * Pin 4: N/A
     * Pin 5: MOSI
     * Pin 6: MISO
     * Pin 7: SCK
     */
    DDRB = 0b00000000;
  9a:	14 b8       	out	0x04, r1	; 4
     * Pin 4: N/A
     * Pin 5: N/A
     * Pin 6: N/A
     * Pin 7: N/A
     */
    DDRC = 0b00001111;
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	87 b9       	out	0x07, r24	; 7
    PORTC = 0b00000000;
  a0:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	87 ec       	ldi	r24, 0xC7	; 199
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <initIO+0xe>
  aa:	00 c0       	rjmp	.+0      	; 0xac <initIO+0x14>
  ac:	00 00       	nop
    _delay_us(50);
    PORTC = 0b00001000;
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	88 b9       	out	0x08, r24	; 8
     * Pin 4: Stepper Driver Step (OUTPUT)
     * Pin 5: Stepper Driver Direction (OUTPUT)
     * Pin 6: N/A
     * Pin 7: N/A
     */
    DDRD = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000000;
  b6:	1b b8       	out	0x0b, r1	; 11
    
    setPosition = 0;
  b8:	10 92 00 01 	sts	0x0100, r1
  bc:	10 92 01 01 	sts	0x0101, r1
  c0:	10 92 02 01 	sts	0x0102, r1
  c4:	10 92 03 01 	sts	0x0103, r1
    actualPosition = 0;
  c8:	10 92 04 01 	sts	0x0104, r1
  cc:	10 92 05 01 	sts	0x0105, r1
  d0:	10 92 06 01 	sts	0x0106, r1
  d4:	10 92 07 01 	sts	0x0107, r1
  d8:	08 95       	ret

000000da <readEncoder>:
int32_t readEncoder(){
    
    int32_t position = 0;
    
    // Enable the quadrature decoder
    bit_clear(ENCODER, ENC_OE);
  da:	42 98       	cbi	0x08, 2	; 8
    
    // Select first Byte
    bit_clear(ENCODER, ENC_SEL1);
  dc:	40 98       	cbi	0x08, 0	; 8
    bit_set(ENCODER, ENC_SEL2);
  de:	41 9a       	sbi	0x08, 1	; 8
    
    // Read Byte
    position = PINC;
  e0:	66 b1       	in	r22, 0x06	; 6
  e2:	86 2f       	mov	r24, r22
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b0 e0       	ldi	r27, 0x00	; 0
    
    // Select second Byte
    bit_set(ENCODER, ENC_SEL1);
  ea:	40 9a       	sbi	0x08, 0	; 8
    bit_set(ENCODER, ENC_SEL2);
  ec:	41 9a       	sbi	0x08, 1	; 8
    
    // Read Byte
    position = position << 8;
  ee:	ba 2f       	mov	r27, r26
  f0:	a9 2f       	mov	r26, r25
  f2:	98 2f       	mov	r25, r24
  f4:	88 27       	eor	r24, r24
    position += PINC;
  f6:	26 b1       	in	r18, 0x06	; 6
  f8:	82 0f       	add	r24, r18
  fa:	91 1d       	adc	r25, r1
  fc:	a1 1d       	adc	r26, r1
  fe:	b1 1d       	adc	r27, r1
    
    // Select first Byte
    bit_clear(ENCODER, ENC_SEL1);
 100:	40 98       	cbi	0x08, 0	; 8
    bit_clear(ENCODER, ENC_SEL2);
 102:	41 98       	cbi	0x08, 1	; 8
    
    // Read Byte
    position = position << 8;
 104:	ba 2f       	mov	r27, r26
 106:	a9 2f       	mov	r26, r25
 108:	98 2f       	mov	r25, r24
 10a:	88 27       	eor	r24, r24
    position += PINC;
 10c:	26 b1       	in	r18, 0x06	; 6
 10e:	82 0f       	add	r24, r18
 110:	91 1d       	adc	r25, r1
 112:	a1 1d       	adc	r26, r1
 114:	b1 1d       	adc	r27, r1
    
    // Select first Byte
    bit_set(ENCODER, ENC_SEL1);
 116:	40 9a       	sbi	0x08, 0	; 8
    bit_clear(ENCODER, ENC_SEL2);
 118:	41 98       	cbi	0x08, 1	; 8
    
    // Read Byte
    position = position << 8;
 11a:	66 27       	eor	r22, r22
 11c:	78 2f       	mov	r23, r24
 11e:	89 2f       	mov	r24, r25
 120:	9a 2f       	mov	r25, r26
    position += PINC;
 122:	26 b1       	in	r18, 0x06	; 6
    
    //Disable quadrature decoder
    bit_set(ENCODER, ENC_OE);
 124:	42 9a       	sbi	0x08, 2	; 8
    bit_set(ENCODER, ENC_SEL1);
    bit_clear(ENCODER, ENC_SEL2);
    
    // Read Byte
    position = position << 8;
    position += PINC;
 126:	62 0f       	add	r22, r18
 128:	71 1d       	adc	r23, r1
 12a:	81 1d       	adc	r24, r1
 12c:	91 1d       	adc	r25, r1
    //Disable quadrature decoder
    bit_set(ENCODER, ENC_OE);
    
    // Return Position
    return position;
}
 12e:	08 95       	ret

00000130 <step>:
 *         direction: 8 bit variable, direction of motor
 *                      0xFF = backwards
 *                      0x00 = Forwards
 * Ouputs: success: Boolean success confirmation
 */
void step(int32_t numSteps, int8_t direction) {
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
    
    // Set direction
    if (direction == 0xff) {
        bit_set(STEPPER, SD_DIR);
    }
    else if (direction == 0x00) {
 134:	41 11       	cpse	r20, r1
 136:	01 c0       	rjmp	.+2      	; 0x13a <step+0xa>
        bit_clear(STEPPER, SD_DIR);
 138:	5d 98       	cbi	0x0b, 5	; 11
 *         direction: 8 bit variable, direction of motor
 *                      0xFF = backwards
 *                      0x00 = Forwards
 * Ouputs: success: Boolean success confirmation
 */
void step(int32_t numSteps, int8_t direction) {
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	98 01       	movw	r18, r16
        bit_clear(STEPPER, SD_DIR);
    }

    
    // Loop till all steps complete
    for (int32_t i = 0; i <= numSteps; i++){
 140:	60 17       	cp	r22, r16
 142:	71 07       	cpc	r23, r17
 144:	82 07       	cpc	r24, r18
 146:	93 07       	cpc	r25, r19
 148:	9c f0       	brlt	.+38     	; 0x170 <step+0x40>
        //Create steps
        bit_set(STEPPER, SD_STEP);
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <step+0x20>
 154:	00 c0       	rjmp	.+0      	; 0x156 <step+0x26>
 156:	00 00       	nop
        _delay_us(500);
        bit_clear(STEPPER, SD_STEP);
 158:	5c 98       	cbi	0x0b, 4	; 11
 15a:	ef ec       	ldi	r30, 0xCF	; 207
 15c:	f7 e0       	ldi	r31, 0x07	; 7
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <step+0x2e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <step+0x34>
 164:	00 00       	nop
        bit_clear(STEPPER, SD_DIR);
    }

    
    // Loop till all steps complete
    for (int32_t i = 0; i <= numSteps; i++){
 166:	0f 5f       	subi	r16, 0xFF	; 255
 168:	1f 4f       	sbci	r17, 0xFF	; 255
 16a:	2f 4f       	sbci	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	e8 cf       	rjmp	.-48     	; 0x140 <step+0x10>
        bit_set(STEPPER, SD_STEP);
        _delay_us(500);
        bit_clear(STEPPER, SD_STEP);
        _delay_us(500);
    }
}
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <main>:
 176:	0e 94 4c 00 	call	0x98	; 0x98 <initIO>
 17a:	0e 94 6d 00 	call	0xda	; 0xda <readEncoder>
 17e:	60 93 04 01 	sts	0x0104, r22
 182:	70 93 05 01 	sts	0x0105, r23
 186:	80 93 06 01 	sts	0x0106, r24
 18a:	90 93 07 01 	sts	0x0107, r25
 18e:	00 91 00 01 	lds	r16, 0x0100
 192:	10 91 01 01 	lds	r17, 0x0101
 196:	20 91 02 01 	lds	r18, 0x0102
 19a:	30 91 03 01 	lds	r19, 0x0103
 19e:	06 17       	cp	r16, r22
 1a0:	17 07       	cpc	r17, r23
 1a2:	28 07       	cpc	r18, r24
 1a4:	39 07       	cpc	r19, r25
 1a6:	34 f4       	brge	.+12     	; 0x1b4 <main+0x3e>
 1a8:	60 1b       	sub	r22, r16
 1aa:	71 0b       	sbc	r23, r17
 1ac:	82 0b       	sbc	r24, r18
 1ae:	93 0b       	sbc	r25, r19
 1b0:	4f ef       	ldi	r20, 0xFF	; 255
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <main+0x5a>
 1b4:	60 17       	cp	r22, r16
 1b6:	71 07       	cpc	r23, r17
 1b8:	82 07       	cpc	r24, r18
 1ba:	93 07       	cpc	r25, r19
 1bc:	f4 f6       	brge	.-68     	; 0x17a <main+0x4>
 1be:	68 01       	movw	r12, r16
 1c0:	79 01       	movw	r14, r18
 1c2:	c6 1a       	sub	r12, r22
 1c4:	d7 0a       	sbc	r13, r23
 1c6:	e8 0a       	sbc	r14, r24
 1c8:	f9 0a       	sbc	r15, r25
 1ca:	c7 01       	movw	r24, r14
 1cc:	b6 01       	movw	r22, r12
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	0e 94 98 00 	call	0x130	; 0x130 <step>
 1d4:	d2 cf       	rjmp	.-92     	; 0x17a <main+0x4>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
