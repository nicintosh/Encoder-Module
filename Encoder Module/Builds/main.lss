
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000552  2**0
                  ALLOC
  3 .stab         00000b28  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa1  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000201d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	ac 30       	cpi	r26, 0x0C	; 12
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  90:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <initIO>:
int32_t actualPosition;
float ratio;

void initIO(void) {
    
    MCUCR = (1<<JTD);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<JTD);
  9c:	85 bf       	out	0x35, r24	; 53
    /*
     * Port A Setup
     * 
     * Encoder input port
     */
    DDRA = 0b00000000;
  9e:	11 b8       	out	0x01, r1	; 1
     * Pin 4: N/A
     * Pin 5: MOSI
     * Pin 6: MISO
     * Pin 7: SCK
     */
    DDRB = 0b00001000;
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	84 b9       	out	0x04, r24	; 4
    PORTB = 0b00000100;
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	85 b9       	out	0x05, r24	; 5
     * Pin 4: N/A
     * Pin 5: N/A
     * Pin 6: N/A
     * Pin 7: N/A
     */
    DDRC = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 b9       	out	0x07, r24	; 7
    PORTC = 0b00000000;
  ac:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e3       	ldi	r24, 0x3F	; 63
  b0:	9c e9       	ldi	r25, 0x9C	; 156
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <initIO+0x1a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <initIO+0x20>
  b8:	00 00       	nop
    _delay_ms(10);
    PORTC = 0b00010000;
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	88 b9       	out	0x08, r24	; 8
     * Pin 4: Stepper Driver Step (OUTPUT)
     * Pin 5: Stepper Driver Direction (OUTPUT)
     * Pin 6: N/A
     * Pin 7: N/A
     */
    DDRD = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000000;
  c2:	1b b8       	out	0x0b, r1	; 11
    //EICRA = (1<<ISC21);
    //EIMSK = (1<<INT2);
    //sei();
    
    
    setPosition = 0;
  c4:	10 92 00 01 	sts	0x0100, r1
  c8:	10 92 01 01 	sts	0x0101, r1
  cc:	10 92 02 01 	sts	0x0102, r1
  d0:	10 92 03 01 	sts	0x0103, r1
    actualPosition = 0;
  d4:	10 92 04 01 	sts	0x0104, r1
  d8:	10 92 05 01 	sts	0x0105, r1
  dc:	10 92 06 01 	sts	0x0106, r1
  e0:	10 92 07 01 	sts	0x0107, r1
    ratio = 6;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	a0 ec       	ldi	r26, 0xC0	; 192
  ea:	b0 e4       	ldi	r27, 0x40	; 64
  ec:	80 93 08 01 	sts	0x0108, r24
  f0:	90 93 09 01 	sts	0x0109, r25
  f4:	a0 93 0a 01 	sts	0x010A, r26
  f8:	b0 93 0b 01 	sts	0x010B, r27
  fc:	08 95       	ret

000000fe <readEncoder>:
int32_t readEncoder(){
   
    int32_t position = 0;
    
    // Enable the quadrature decoder
    bit_clear(ENCODER, ENC_OE);
  fe:	45 98       	cbi	0x08, 5	; 8
    
    bit_clear(ENCODER, ENC_SEL1);
 100:	47 98       	cbi	0x08, 7	; 8
    bit_set(ENCODER, ENC_SEL2);
 102:	46 9a       	sbi	0x08, 6	; 8
    
    // Read Byte
    position = DATA;
 104:	60 b1       	in	r22, 0x00	; 0
 106:	86 2f       	mov	r24, r22
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	a0 e0       	ldi	r26, 0x00	; 0
 10c:	b0 e0       	ldi	r27, 0x00	; 0
    
    // Select second Byte
    bit_set(ENCODER, ENC_SEL1);
 10e:	47 9a       	sbi	0x08, 7	; 8
    bit_set(ENCODER, ENC_SEL2);
 110:	46 9a       	sbi	0x08, 6	; 8

    // Read Byte
    position = position << 8;
 112:	ba 2f       	mov	r27, r26
 114:	a9 2f       	mov	r26, r25
 116:	98 2f       	mov	r25, r24
 118:	88 27       	eor	r24, r24
    position += DATA;
 11a:	20 b1       	in	r18, 0x00	; 0
 11c:	82 0f       	add	r24, r18
 11e:	91 1d       	adc	r25, r1
 120:	a1 1d       	adc	r26, r1
 122:	b1 1d       	adc	r27, r1
    
    // Select first Byte
    bit_clear(ENCODER, ENC_SEL1);
 124:	47 98       	cbi	0x08, 7	; 8
    bit_clear(ENCODER, ENC_SEL2);
 126:	46 98       	cbi	0x08, 6	; 8
   
    // Read Byte
    position = position << 8;
 128:	ba 2f       	mov	r27, r26
 12a:	a9 2f       	mov	r26, r25
 12c:	98 2f       	mov	r25, r24
 12e:	88 27       	eor	r24, r24
    position += DATA;
 130:	20 b1       	in	r18, 0x00	; 0
 132:	82 0f       	add	r24, r18
 134:	91 1d       	adc	r25, r1
 136:	a1 1d       	adc	r26, r1
 138:	b1 1d       	adc	r27, r1
    
    // Select first Byte
    bit_set(ENCODER, ENC_SEL1);
 13a:	47 9a       	sbi	0x08, 7	; 8
    bit_clear(ENCODER, ENC_SEL2);
 13c:	46 98       	cbi	0x08, 6	; 8
    
    // Read Byte
    position = position << 8;
 13e:	66 27       	eor	r22, r22
 140:	78 2f       	mov	r23, r24
 142:	89 2f       	mov	r24, r25
 144:	9a 2f       	mov	r25, r26
    position += DATA;
 146:	20 b1       	in	r18, 0x00	; 0
    
    //Disable quadrature decoder
    bit_set(ENCODER, ENC_OE);
 148:	45 9a       	sbi	0x08, 5	; 8
    bit_set(ENCODER, ENC_SEL1);
    bit_clear(ENCODER, ENC_SEL2);
    
    // Read Byte
    position = position << 8;
    position += DATA;
 14a:	62 0f       	add	r22, r18
 14c:	71 1d       	adc	r23, r1
 14e:	81 1d       	adc	r24, r1
 150:	91 1d       	adc	r25, r1
    
    //Disable quadrature decoder
    bit_set(ENCODER, ENC_OE);
    
    // Return Position
    position = position/7.2;
 152:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__floatsisf>
 156:	26 e6       	ldi	r18, 0x66	; 102
 158:	36 e6       	ldi	r19, 0x66	; 102
 15a:	46 ee       	ldi	r20, 0xE6	; 230
 15c:	50 e4       	ldi	r21, 0x40	; 64
 15e:	0e 94 36 01 	call	0x26c	; 0x26c <__divsf3>
 162:	0e 94 9e 01 	call	0x33c	; 0x33c <__fixsfsi>
    return position;
}
 166:	08 95       	ret

00000168 <step>:
 *         direction: 8 bit variable, direction of motor
 *                      0xFF = backwards
 *                      0x00 = Forwards
 * Ouputs: success: Boolean success confirmation
 */
void step(int32_t numSteps, int32_t direction) {
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
    
    
    // Set direction
    if (direction == 0) {
 170:	21 15       	cp	r18, r1
 172:	31 05       	cpc	r19, r1
 174:	41 05       	cpc	r20, r1
 176:	51 05       	cpc	r21, r1
 178:	29 f4       	brne	.+10     	; 0x184 <step+0x1c>
        bit_set(STEPPER, SD_DIR);
 17a:	5d 9a       	sbi	0x0b, 5	; 11
 *         direction: 8 bit variable, direction of motor
 *                      0xFF = backwards
 *                      0x00 = Forwards
 * Ouputs: success: Boolean success confirmation
 */
void step(int32_t numSteps, int32_t direction) {
 17c:	c1 2c       	mov	r12, r1
 17e:	d1 2c       	mov	r13, r1
 180:	76 01       	movw	r14, r12
 182:	07 c0       	rjmp	.+14     	; 0x192 <step+0x2a>
    
    // Set direction
    if (direction == 0) {
        bit_set(STEPPER, SD_DIR);
    }
    else if (direction == 1) {
 184:	21 30       	cpi	r18, 0x01	; 1
 186:	31 05       	cpc	r19, r1
 188:	41 05       	cpc	r20, r1
 18a:	51 05       	cpc	r21, r1
 18c:	b9 f7       	brne	.-18     	; 0x17c <step+0x14>
        bit_clear(STEPPER, SD_DIR);
 18e:	5d 98       	cbi	0x0b, 5	; 11
 190:	f5 cf       	rjmp	.-22     	; 0x17c <step+0x14>
    }
    
    // Loop till all steps complete
    for (int32_t i = 0; i <= numSteps; i++){
 192:	6c 15       	cp	r22, r12
 194:	7d 05       	cpc	r23, r13
 196:	8e 05       	cpc	r24, r14
 198:	9f 05       	cpc	r25, r15
 19a:	a4 f0       	brlt	.+40     	; 0x1c4 <step+0x5c>
        //Create steps
        bit_set(STEPPER, SD_STEP);
 19c:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	ef ec       	ldi	r30, 0xCF	; 207
 1a0:	f7 e0       	ldi	r31, 0x07	; 7
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <step+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <step+0x40>
 1a8:	00 00       	nop
        _delay_us(500);
        bit_clear(STEPPER, SD_STEP);
 1aa:	5c 98       	cbi	0x0b, 4	; 11
 1ac:	ef ec       	ldi	r30, 0xCF	; 207
 1ae:	f7 e0       	ldi	r31, 0x07	; 7
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <step+0x48>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <step+0x4e>
 1b6:	00 00       	nop
    else if (direction == 1) {
        bit_clear(STEPPER, SD_DIR);
    }
    
    // Loop till all steps complete
    for (int32_t i = 0; i <= numSteps; i++){
 1b8:	ff ef       	ldi	r31, 0xFF	; 255
 1ba:	cf 1a       	sub	r12, r31
 1bc:	df 0a       	sbc	r13, r31
 1be:	ef 0a       	sbc	r14, r31
 1c0:	ff 0a       	sbc	r15, r31
 1c2:	e7 cf       	rjmp	.-50     	; 0x192 <step+0x2a>
        bit_set(STEPPER, SD_STEP);
        _delay_us(500);
        bit_clear(STEPPER, SD_STEP);
        _delay_us(500);
    }
}
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

000001ce <min>:

int32_t min(int32_t a, int32_t b) {
 1ce:	26 17       	cp	r18, r22
 1d0:	37 07       	cpc	r19, r23
 1d2:	48 07       	cpc	r20, r24
 1d4:	59 07       	cpc	r21, r25
 1d6:	14 f4       	brge	.+4      	; 0x1dc <min+0xe>
 1d8:	ca 01       	movw	r24, r20
 1da:	b9 01       	movw	r22, r18
        return b;
    }
    else {
        return a;
    }
}
 1dc:	08 95       	ret

000001de <main>:
 1de:	0e 94 4c 00 	call	0x98	; 0x98 <initIO>
 1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <readEncoder>
 1e6:	60 93 04 01 	sts	0x0104, r22
 1ea:	70 93 05 01 	sts	0x0105, r23
 1ee:	80 93 06 01 	sts	0x0106, r24
 1f2:	90 93 07 01 	sts	0x0107, r25
 1f6:	00 91 00 01 	lds	r16, 0x0100
 1fa:	10 91 01 01 	lds	r17, 0x0101
 1fe:	20 91 02 01 	lds	r18, 0x0102
 202:	30 91 03 01 	lds	r19, 0x0103
 206:	06 17       	cp	r16, r22
 208:	17 07       	cpc	r17, r23
 20a:	28 07       	cpc	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	94 f4       	brge	.+36     	; 0x234 <main+0x56>
 210:	60 1b       	sub	r22, r16
 212:	71 0b       	sbc	r23, r17
 214:	82 0b       	sbc	r24, r18
 216:	93 0b       	sbc	r25, r19
 218:	6b 30       	cpi	r22, 0x0B	; 11
 21a:	71 05       	cpc	r23, r1
 21c:	81 05       	cpc	r24, r1
 21e:	91 05       	cpc	r25, r1
 220:	24 f0       	brlt	.+8      	; 0x22a <main+0x4c>
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	19 c0       	rjmp	.+50     	; 0x266 <main+0x88>
 234:	60 17       	cp	r22, r16
 236:	71 07       	cpc	r23, r17
 238:	82 07       	cpc	r24, r18
 23a:	93 07       	cpc	r25, r19
 23c:	94 f6       	brge	.-92     	; 0x1e2 <main+0x4>
 23e:	68 01       	movw	r12, r16
 240:	79 01       	movw	r14, r18
 242:	c6 1a       	sub	r12, r22
 244:	d7 0a       	sbc	r13, r23
 246:	e8 0a       	sbc	r14, r24
 248:	f9 0a       	sbc	r15, r25
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	6b 30       	cpi	r22, 0x0B	; 11
 250:	71 05       	cpc	r23, r1
 252:	81 05       	cpc	r24, r1
 254:	91 05       	cpc	r25, r1
 256:	24 f0       	brlt	.+8      	; 0x260 <main+0x82>
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	a9 01       	movw	r20, r18
 266:	0e 94 b4 00 	call	0x168	; 0x168 <step>
 26a:	bb cf       	rjmp	.-138    	; 0x1e2 <main+0x4>

0000026c <__divsf3>:
 26c:	0c d0       	rcall	.+24     	; 0x286 <__divsf3x>
 26e:	eb c0       	rjmp	.+470    	; 0x446 <__fp_round>
 270:	e3 d0       	rcall	.+454    	; 0x438 <__fp_pscB>
 272:	40 f0       	brcs	.+16     	; 0x284 <__divsf3+0x18>
 274:	da d0       	rcall	.+436    	; 0x42a <__fp_pscA>
 276:	30 f0       	brcs	.+12     	; 0x284 <__divsf3+0x18>
 278:	21 f4       	brne	.+8      	; 0x282 <__divsf3+0x16>
 27a:	5f 3f       	cpi	r21, 0xFF	; 255
 27c:	19 f0       	breq	.+6      	; 0x284 <__divsf3+0x18>
 27e:	cc c0       	rjmp	.+408    	; 0x418 <__fp_inf>
 280:	51 11       	cpse	r21, r1
 282:	15 c1       	rjmp	.+554    	; 0x4ae <__fp_szero>
 284:	cf c0       	rjmp	.+414    	; 0x424 <__fp_nan>

00000286 <__divsf3x>:
 286:	f0 d0       	rcall	.+480    	; 0x468 <__fp_split3>
 288:	98 f3       	brcs	.-26     	; 0x270 <__divsf3+0x4>

0000028a <__divsf3_pse>:
 28a:	99 23       	and	r25, r25
 28c:	c9 f3       	breq	.-14     	; 0x280 <__divsf3+0x14>
 28e:	55 23       	and	r21, r21
 290:	b1 f3       	breq	.-20     	; 0x27e <__divsf3+0x12>
 292:	95 1b       	sub	r25, r21
 294:	55 0b       	sbc	r21, r21
 296:	bb 27       	eor	r27, r27
 298:	aa 27       	eor	r26, r26
 29a:	62 17       	cp	r22, r18
 29c:	73 07       	cpc	r23, r19
 29e:	84 07       	cpc	r24, r20
 2a0:	38 f0       	brcs	.+14     	; 0x2b0 <__divsf3_pse+0x26>
 2a2:	9f 5f       	subi	r25, 0xFF	; 255
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
 2a6:	22 0f       	add	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	44 1f       	adc	r20, r20
 2ac:	aa 1f       	adc	r26, r26
 2ae:	a9 f3       	breq	.-22     	; 0x29a <__divsf3_pse+0x10>
 2b0:	33 d0       	rcall	.+102    	; 0x318 <__divsf3_pse+0x8e>
 2b2:	0e 2e       	mov	r0, r30
 2b4:	3a f0       	brmi	.+14     	; 0x2c4 <__divsf3_pse+0x3a>
 2b6:	e0 e8       	ldi	r30, 0x80	; 128
 2b8:	30 d0       	rcall	.+96     	; 0x31a <__divsf3_pse+0x90>
 2ba:	91 50       	subi	r25, 0x01	; 1
 2bc:	50 40       	sbci	r21, 0x00	; 0
 2be:	e6 95       	lsr	r30
 2c0:	00 1c       	adc	r0, r0
 2c2:	ca f7       	brpl	.-14     	; 0x2b6 <__divsf3_pse+0x2c>
 2c4:	29 d0       	rcall	.+82     	; 0x318 <__divsf3_pse+0x8e>
 2c6:	fe 2f       	mov	r31, r30
 2c8:	27 d0       	rcall	.+78     	; 0x318 <__divsf3_pse+0x8e>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	bb 1f       	adc	r27, r27
 2d2:	26 17       	cp	r18, r22
 2d4:	37 07       	cpc	r19, r23
 2d6:	48 07       	cpc	r20, r24
 2d8:	ab 07       	cpc	r26, r27
 2da:	b0 e8       	ldi	r27, 0x80	; 128
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <__divsf3_pse+0x56>
 2de:	bb 0b       	sbc	r27, r27
 2e0:	80 2d       	mov	r24, r0
 2e2:	bf 01       	movw	r22, r30
 2e4:	ff 27       	eor	r31, r31
 2e6:	93 58       	subi	r25, 0x83	; 131
 2e8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ea:	2a f0       	brmi	.+10     	; 0x2f6 <__divsf3_pse+0x6c>
 2ec:	9e 3f       	cpi	r25, 0xFE	; 254
 2ee:	51 05       	cpc	r21, r1
 2f0:	68 f0       	brcs	.+26     	; 0x30c <__divsf3_pse+0x82>
 2f2:	92 c0       	rjmp	.+292    	; 0x418 <__fp_inf>
 2f4:	dc c0       	rjmp	.+440    	; 0x4ae <__fp_szero>
 2f6:	5f 3f       	cpi	r21, 0xFF	; 255
 2f8:	ec f3       	brlt	.-6      	; 0x2f4 <__divsf3_pse+0x6a>
 2fa:	98 3e       	cpi	r25, 0xE8	; 232
 2fc:	dc f3       	brlt	.-10     	; 0x2f4 <__divsf3_pse+0x6a>
 2fe:	86 95       	lsr	r24
 300:	77 95       	ror	r23
 302:	67 95       	ror	r22
 304:	b7 95       	ror	r27
 306:	f7 95       	ror	r31
 308:	9f 5f       	subi	r25, 0xFF	; 255
 30a:	c9 f7       	brne	.-14     	; 0x2fe <__divsf3_pse+0x74>
 30c:	88 0f       	add	r24, r24
 30e:	91 1d       	adc	r25, r1
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	97 f9       	bld	r25, 7
 316:	08 95       	ret
 318:	e1 e0       	ldi	r30, 0x01	; 1
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	88 1f       	adc	r24, r24
 320:	bb 1f       	adc	r27, r27
 322:	62 17       	cp	r22, r18
 324:	73 07       	cpc	r23, r19
 326:	84 07       	cpc	r24, r20
 328:	ba 07       	cpc	r27, r26
 32a:	20 f0       	brcs	.+8      	; 0x334 <__divsf3_pse+0xaa>
 32c:	62 1b       	sub	r22, r18
 32e:	73 0b       	sbc	r23, r19
 330:	84 0b       	sbc	r24, r20
 332:	ba 0b       	sbc	r27, r26
 334:	ee 1f       	adc	r30, r30
 336:	88 f7       	brcc	.-30     	; 0x31a <__divsf3_pse+0x90>
 338:	e0 95       	com	r30
 33a:	08 95       	ret

0000033c <__fixsfsi>:
 33c:	04 d0       	rcall	.+8      	; 0x346 <__fixunssfsi>
 33e:	68 94       	set
 340:	b1 11       	cpse	r27, r1
 342:	b5 c0       	rjmp	.+362    	; 0x4ae <__fp_szero>
 344:	08 95       	ret

00000346 <__fixunssfsi>:
 346:	98 d0       	rcall	.+304    	; 0x478 <__fp_splitA>
 348:	88 f0       	brcs	.+34     	; 0x36c <__fixunssfsi+0x26>
 34a:	9f 57       	subi	r25, 0x7F	; 127
 34c:	90 f0       	brcs	.+36     	; 0x372 <__fixunssfsi+0x2c>
 34e:	b9 2f       	mov	r27, r25
 350:	99 27       	eor	r25, r25
 352:	b7 51       	subi	r27, 0x17	; 23
 354:	a0 f0       	brcs	.+40     	; 0x37e <__fixunssfsi+0x38>
 356:	d1 f0       	breq	.+52     	; 0x38c <__fixunssfsi+0x46>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	1a f0       	brmi	.+6      	; 0x368 <__fixunssfsi+0x22>
 362:	ba 95       	dec	r27
 364:	c9 f7       	brne	.-14     	; 0x358 <__fixunssfsi+0x12>
 366:	12 c0       	rjmp	.+36     	; 0x38c <__fixunssfsi+0x46>
 368:	b1 30       	cpi	r27, 0x01	; 1
 36a:	81 f0       	breq	.+32     	; 0x38c <__fixunssfsi+0x46>
 36c:	9f d0       	rcall	.+318    	; 0x4ac <__fp_zero>
 36e:	b1 e0       	ldi	r27, 0x01	; 1
 370:	08 95       	ret
 372:	9c c0       	rjmp	.+312    	; 0x4ac <__fp_zero>
 374:	67 2f       	mov	r22, r23
 376:	78 2f       	mov	r23, r24
 378:	88 27       	eor	r24, r24
 37a:	b8 5f       	subi	r27, 0xF8	; 248
 37c:	39 f0       	breq	.+14     	; 0x38c <__fixunssfsi+0x46>
 37e:	b9 3f       	cpi	r27, 0xF9	; 249
 380:	cc f3       	brlt	.-14     	; 0x374 <__fixunssfsi+0x2e>
 382:	86 95       	lsr	r24
 384:	77 95       	ror	r23
 386:	67 95       	ror	r22
 388:	b3 95       	inc	r27
 38a:	d9 f7       	brne	.-10     	; 0x382 <__fixunssfsi+0x3c>
 38c:	3e f4       	brtc	.+14     	; 0x39c <__fixunssfsi+0x56>
 38e:	90 95       	com	r25
 390:	80 95       	com	r24
 392:	70 95       	com	r23
 394:	61 95       	neg	r22
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	8f 4f       	sbci	r24, 0xFF	; 255
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__floatunsisf>:
 39e:	e8 94       	clt
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <__floatsisf+0x12>

000003a2 <__floatsisf>:
 3a2:	97 fb       	bst	r25, 7
 3a4:	3e f4       	brtc	.+14     	; 0x3b4 <__floatsisf+0x12>
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	99 23       	and	r25, r25
 3b6:	a9 f0       	breq	.+42     	; 0x3e2 <__floatsisf+0x40>
 3b8:	f9 2f       	mov	r31, r25
 3ba:	96 e9       	ldi	r25, 0x96	; 150
 3bc:	bb 27       	eor	r27, r27
 3be:	93 95       	inc	r25
 3c0:	f6 95       	lsr	r31
 3c2:	87 95       	ror	r24
 3c4:	77 95       	ror	r23
 3c6:	67 95       	ror	r22
 3c8:	b7 95       	ror	r27
 3ca:	f1 11       	cpse	r31, r1
 3cc:	f8 cf       	rjmp	.-16     	; 0x3be <__floatsisf+0x1c>
 3ce:	fa f4       	brpl	.+62     	; 0x40e <__floatsisf+0x6c>
 3d0:	bb 0f       	add	r27, r27
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__floatsisf+0x36>
 3d4:	60 ff       	sbrs	r22, 0
 3d6:	1b c0       	rjmp	.+54     	; 0x40e <__floatsisf+0x6c>
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	16 c0       	rjmp	.+44     	; 0x40e <__floatsisf+0x6c>
 3e2:	88 23       	and	r24, r24
 3e4:	11 f0       	breq	.+4      	; 0x3ea <__floatsisf+0x48>
 3e6:	96 e9       	ldi	r25, 0x96	; 150
 3e8:	11 c0       	rjmp	.+34     	; 0x40c <__floatsisf+0x6a>
 3ea:	77 23       	and	r23, r23
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <__floatsisf+0x54>
 3ee:	9e e8       	ldi	r25, 0x8E	; 142
 3f0:	87 2f       	mov	r24, r23
 3f2:	76 2f       	mov	r23, r22
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <__floatsisf+0x5e>
 3f6:	66 23       	and	r22, r22
 3f8:	71 f0       	breq	.+28     	; 0x416 <__floatsisf+0x74>
 3fa:	96 e8       	ldi	r25, 0x86	; 134
 3fc:	86 2f       	mov	r24, r22
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	2a f0       	brmi	.+10     	; 0x40e <__floatsisf+0x6c>
 404:	9a 95       	dec	r25
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	da f7       	brpl	.-10     	; 0x404 <__floatsisf+0x62>
 40e:	88 0f       	add	r24, r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	97 f9       	bld	r25, 7
 416:	08 95       	ret

00000418 <__fp_inf>:
 418:	97 f9       	bld	r25, 7
 41a:	9f 67       	ori	r25, 0x7F	; 127
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	08 95       	ret

00000424 <__fp_nan>:
 424:	9f ef       	ldi	r25, 0xFF	; 255
 426:	80 ec       	ldi	r24, 0xC0	; 192
 428:	08 95       	ret

0000042a <__fp_pscA>:
 42a:	00 24       	eor	r0, r0
 42c:	0a 94       	dec	r0
 42e:	16 16       	cp	r1, r22
 430:	17 06       	cpc	r1, r23
 432:	18 06       	cpc	r1, r24
 434:	09 06       	cpc	r0, r25
 436:	08 95       	ret

00000438 <__fp_pscB>:
 438:	00 24       	eor	r0, r0
 43a:	0a 94       	dec	r0
 43c:	12 16       	cp	r1, r18
 43e:	13 06       	cpc	r1, r19
 440:	14 06       	cpc	r1, r20
 442:	05 06       	cpc	r0, r21
 444:	08 95       	ret

00000446 <__fp_round>:
 446:	09 2e       	mov	r0, r25
 448:	03 94       	inc	r0
 44a:	00 0c       	add	r0, r0
 44c:	11 f4       	brne	.+4      	; 0x452 <__fp_round+0xc>
 44e:	88 23       	and	r24, r24
 450:	52 f0       	brmi	.+20     	; 0x466 <__fp_round+0x20>
 452:	bb 0f       	add	r27, r27
 454:	40 f4       	brcc	.+16     	; 0x466 <__fp_round+0x20>
 456:	bf 2b       	or	r27, r31
 458:	11 f4       	brne	.+4      	; 0x45e <__fp_round+0x18>
 45a:	60 ff       	sbrs	r22, 0
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__fp_round+0x20>
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	08 95       	ret

00000468 <__fp_split3>:
 468:	57 fd       	sbrc	r21, 7
 46a:	90 58       	subi	r25, 0x80	; 128
 46c:	44 0f       	add	r20, r20
 46e:	55 1f       	adc	r21, r21
 470:	59 f0       	breq	.+22     	; 0x488 <__fp_splitA+0x10>
 472:	5f 3f       	cpi	r21, 0xFF	; 255
 474:	71 f0       	breq	.+28     	; 0x492 <__fp_splitA+0x1a>
 476:	47 95       	ror	r20

00000478 <__fp_splitA>:
 478:	88 0f       	add	r24, r24
 47a:	97 fb       	bst	r25, 7
 47c:	99 1f       	adc	r25, r25
 47e:	61 f0       	breq	.+24     	; 0x498 <__fp_splitA+0x20>
 480:	9f 3f       	cpi	r25, 0xFF	; 255
 482:	79 f0       	breq	.+30     	; 0x4a2 <__fp_splitA+0x2a>
 484:	87 95       	ror	r24
 486:	08 95       	ret
 488:	12 16       	cp	r1, r18
 48a:	13 06       	cpc	r1, r19
 48c:	14 06       	cpc	r1, r20
 48e:	55 1f       	adc	r21, r21
 490:	f2 cf       	rjmp	.-28     	; 0x476 <__fp_split3+0xe>
 492:	46 95       	lsr	r20
 494:	f1 df       	rcall	.-30     	; 0x478 <__fp_splitA>
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <__fp_splitA+0x30>
 498:	16 16       	cp	r1, r22
 49a:	17 06       	cpc	r1, r23
 49c:	18 06       	cpc	r1, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	f1 cf       	rjmp	.-30     	; 0x484 <__fp_splitA+0xc>
 4a2:	86 95       	lsr	r24
 4a4:	71 05       	cpc	r23, r1
 4a6:	61 05       	cpc	r22, r1
 4a8:	08 94       	sec
 4aa:	08 95       	ret

000004ac <__fp_zero>:
 4ac:	e8 94       	clt

000004ae <__fp_szero>:
 4ae:	bb 27       	eor	r27, r27
 4b0:	66 27       	eor	r22, r22
 4b2:	77 27       	eor	r23, r23
 4b4:	cb 01       	movw	r24, r22
 4b6:	97 f9       	bld	r25, 7
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
